diff --git a/configure.ac b/configure.ac
index 9721748..8317b87 100644
--- a/configure.ac
+++ b/configure.ac
@@ -108,7 +108,7 @@ fi
 
 AC_CHECK_PROGS([XSLTPROC], [$XSLTPROC xsltproc])
 AC_CHECK_PROGS([DBUS_BINDING_TOOL], [$DBUS_BINDING_TOOL dbus-binding-tool])
-AC_CHECK_PROGS([PYTHON], [$PYTHON python2.5 python2.4 python2.3 python])
+AC_CHECK_PROGS([PYTHON], [$PYTHON python3 python2.5 python2.4 python2.3 python])
 
 AM_CONDITIONAL([HAVE_TP_EXTENSIONS], [test -n "$XSLTPROC" && test -n "$PYTHON" && test -n "$DBUS_BINDING_TOOL"])
 
@@ -128,7 +128,7 @@ AC_SUBST([includemodemdir],'${includedir}/modem-glib')
 
 dnl check for a version of python that can run the twisted tests
 AC_MSG_CHECKING([for Python with Twisted])
-for TEST_PYTHON in python2.5 python2.6 python; do
+for TEST_PYTHON in python3 python2.5 python2.6 python; do
   AS_IF([$TEST_PYTHON -c "from sys import version_info; import dbus, dbus.mainloop.glib; raise SystemExit(version_info < (2, 5, 0, 'final', 0))" >/dev/null 2>&1],
     [
     AS_IF([$TEST_PYTHON -c "import twisted.internet.reactor" >/dev/null 2>&1],
diff --git a/tools/c-constants-gen.py b/tools/c-constants-gen.py
index 09608c2..cd721c1 100644
--- a/tools/c-constants-gen.py
+++ b/tools/c-constants-gen.py
@@ -11,8 +11,8 @@ class Generator(object):
         self.prefix = prefix + '_'
         self.spec = get_by_path(dom, "spec")[0]
 
-        self.__header = open(output_base + '.h', 'w')
-        self.__docs = open(output_base + '-gtk-doc.h', 'w')
+        self.__header = open(output_base + '.h', 'wb')
+        self.__docs = open(output_base + '-gtk-doc.h', 'wb')
 
     def __call__(self):
         self.do_header()
diff --git a/tools/glib-client-gen.py b/tools/glib-client-gen.py
index 6b0bdeb..8d82e34 100644
--- a/tools/glib-client-gen.py
+++ b/tools/glib-client-gen.py
@@ -63,17 +63,17 @@ class Generator(object):
                 'G_GNUC_DEPRECATED')
 
     def h(self, s):
-        if isinstance(s, unicode):
+        if isinstance(s, str):
             s = s.encode('utf-8')
         self.__header.append(s)
 
     def b(self, s):
-        if isinstance(s, unicode):
+        if isinstance(s, str):
             s = s.encode('utf-8')
         self.__body.append(s)
 
     def d(self, s):
-        if isinstance(s, unicode):
+        if isinstance(s, str):
             s = s.encode('utf-8')
         self.__docs.append(s)
 
diff --git a/tools/glib-client-marshaller-gen.py b/tools/glib-client-marshaller-gen.py
index 5444725..55c3da7 100644
--- a/tools/glib-client-marshaller-gen.py
+++ b/tools/glib-client-marshaller-gen.py
@@ -31,22 +31,22 @@ class Generator(object):
         for signal in signals:
             self.do_signal(signal)
 
-        print 'void'
-        print '%s_register_dbus_glib_marshallers (void)' % self.prefix
-        print '{'
+        print('void')
+        print('%s_register_dbus_glib_marshallers (void)' % self.prefix)
+        print('{')
 
-        all = self.marshallers.keys()
+        all = list(self.marshallers.keys())
         all.sort()
         for marshaller in all:
             rhs = self.marshallers[marshaller]
 
-            print '  dbus_g_object_register_marshaller (%s,' % marshaller
-            print '      G_TYPE_NONE,       /* return */'
+            print('  dbus_g_object_register_marshaller (%s,' % marshaller)
+            print('      G_TYPE_NONE,       /* return */')
             for type in rhs:
-                print '      G_TYPE_%s,' % type.replace('VOID', 'NONE')
-            print '      G_TYPE_INVALID);'
+                print('      G_TYPE_%s,' % type.replace('VOID', 'NONE'))
+            print('      G_TYPE_INVALID);')
 
-        print '}'
+        print('}')
 
 
 def types_to_gtypes(types):
diff --git a/tools/glib-errors-enum-body-gen.py b/tools/glib-errors-enum-body-gen.py
index 44863ee..9568e70 100644
--- a/tools/glib-errors-enum-body-gen.py
+++ b/tools/glib-errors-enum-body-gen.py
@@ -12,28 +12,28 @@ class Generator(object):
         self.errors = self.dom.getElementsByTagNameNS(NS_TP, 'errors')[0]
 
     def do_header(self):
-        print '/* Generated from the Telepathy spec\n'
+        print('/* Generated from the Telepathy spec\n')
         copyrights = self.errors.getElementsByTagNameNS(NS_TP, 'copyright')
         for copyright in copyrights:
-            print get_descendant_text(copyright)
+            print(get_descendant_text(copyright))
         license = self.errors.getElementsByTagNameNS(NS_TP, 'license')[0]
-        print '\n' + get_descendant_text(license) + '\n*/'
+        print('\n' + get_descendant_text(license) + '\n*/')
 
     def do_enum_values(self):
         for error in self.errors.getElementsByTagNameNS(NS_TP, 'error'):
-            print ''
+            print('')
             nick = error.getAttribute('name').replace(' ', '')
             name = camelcase_to_upper(nick.replace('.', ''))
             ns = error.parentNode.getAttribute('namespace')
             enum = 'TP_ERROR_' + name
-            print '        /* ' + ns + '.' + name
-            print '    ' + get_docstring(error)
-            print '     */'
-            print '        { %s, "%s", "%s" },' % (enum, enum, nick)
+            print('        /* ' + ns + '.' + name)
+            print('    ' + get_docstring(error))
+            print('     */')
+            print('        { %s, "%s", "%s" },' % (enum, enum, nick))
 
 
     def do_get_type(self):
-        print """
+        print("""
 #include <_gen/telepathy-errors.h>
 
 GType
@@ -42,16 +42,16 @@ tp_error_get_type (void)
   static GType etype = 0;
   if (G_UNLIKELY (etype == 0))
     {
-      static const GEnumValue values[] = {"""
+      static const GEnumValue values[] = {""")
         self.do_enum_values()
-        print """\
+        print("""\
       };
 
       etype = g_enum_register_static ("TpError", values);
     }
   return etype;
 }
-"""
+""")
 
     def __call__(self):
         self.do_header()
diff --git a/tools/glib-errors-enum-header-gen.py b/tools/glib-errors-enum-header-gen.py
index 64939b4..a881a96 100644
--- a/tools/glib-errors-enum-header-gen.py
+++ b/tools/glib-errors-enum-header-gen.py
@@ -12,29 +12,29 @@ class Generator(object):
         self.errors = self.dom.getElementsByTagNameNS(NS_TP, 'errors')[0]
 
     def do_header(self):
-        print '/* Generated from the Telepathy spec\n'
+        print('/* Generated from the Telepathy spec\n')
         copyrights = self.errors.getElementsByTagNameNS(NS_TP, 'copyright')
         for copyright in copyrights:
-            print get_descendant_text(copyright)
+            print(get_descendant_text(copyright))
         license = self.errors.getElementsByTagNameNS(NS_TP, 'license')[0]
-        print '\n' + get_descendant_text(license) + '\n*/'
+        print('\n' + get_descendant_text(license) + '\n*/')
 
     def do_gtkdoc(self):
         for error in self.errors.getElementsByTagNameNS(NS_TP, 'error'):
             ns = error.parentNode.getAttribute('namespace')
             nick = error.getAttribute('name').replace(' ', '')
             enum = 'TP_ERROR_' + camelcase_to_upper(nick.replace('.', ''))
-            print ' * @' + enum + ': ' + ns + '.' + nick + ':'
-            print ' *     ' + get_docstring(error) + '    '
+            print(' * @' + enum + ': ' + ns + '.' + nick + ':')
+            print(' *     ' + get_docstring(error) + '    ')
 
     def do_enumnames(self):
         for error in self.errors.getElementsByTagNameNS(NS_TP, 'error'):
             nick = error.getAttribute('name').replace(' ', '')
             enum = 'TP_ERROR_' + camelcase_to_upper(nick.replace('.', ''))
-            print '    ' + enum + ','
+            print('    ' + enum + ',')
 
     def do_get_type(self):
-        print """
+        print("""
 #include <glib-object.h>
 
 G_BEGIN_DECLS
@@ -47,23 +47,23 @@ GType tp_error_get_type (void);
  * The GType of the Telepathy error enumeration.
  */
 #define TP_TYPE_ERROR (tp_error_get_type())
-"""
+""")
 
     def do_enum(self):
-        print """\
+        print("""\
 /**
- * TpError:"""
+ * TpError:""")
         self.do_gtkdoc()
-        print """\
+        print("""\
  *
  * Enumerated type representing the Telepathy D-Bus errors.
  */
-typedef enum {"""
+typedef enum {""")
         self.do_enumnames()
-        print """\
+        print("""\
 } TpError;
 
-G_END_DECLS"""
+G_END_DECLS""")
 
     def __call__(self):
         self.do_header()
diff --git a/tools/glib-ginterface-gen.py b/tools/glib-ginterface-gen.py
index 04509fd..0d762d6 100644
--- a/tools/glib-ginterface-gen.py
+++ b/tools/glib-ginterface-gen.py
@@ -30,6 +30,7 @@ from libglibcodegen import Signature, type_to_gtype, cmp_by_name, \
         NS_TP, dbus_gutils_wincaps_to_uscore, \
         signal_to_marshal_name, method_to_glue_marshal_name
 
+from functools import cmp_to_key
 
 NS_TP = "http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0"
 
@@ -75,17 +76,17 @@ class Generator(object):
         self.allow_havoc = allow_havoc
 
     def h(self, s):
-        if isinstance(s, unicode):
+        if isinstance(s, str):
             s = s.encode('utf-8')
         self.__header.append(s)
 
     def b(self, s):
-        if isinstance(s, unicode):
+        if isinstance(s, str):
             s = s.encode('utf-8')
         self.__body.append(s)
 
     def d(self, s):
-        if isinstance(s, unicode):
+        if isinstance(s, str):
             s = s.encode('utf-8')
         self.__docs.append(s)
 
@@ -712,7 +713,7 @@ class Generator(object):
 
     def __call__(self):
         nodes = self.dom.getElementsByTagName('node')
-        nodes.sort(cmp_by_name)
+        nodes.sort(key=cmp_to_key(cmp_by_name))
 
         self.h('#include <glib-object.h>')
         self.h('#include <dbus/dbus-glib.h>')
@@ -742,13 +743,13 @@ class Generator(object):
 
         self.h('')
         self.b('')
-        open(self.basename + '.h', 'w').write('\n'.join(self.__header))
-        open(self.basename + '.c', 'w').write('\n'.join(self.__body))
-        open(self.basename + '-gtk-doc.h', 'w').write('\n'.join(self.__docs))
+        open(self.basename + '.h', 'wb').write(b"\n".join(self.__header))
+        open(self.basename + '.c', 'wb').write(b"\n".join(self.__body))
+        open(self.basename + '-gtk-doc.h', 'wb').write(b"\n".join(self.__docs))
 
 
 def cmdline_error():
-    print """\
+    print("""\
 usage:
     gen-ginterface [OPTIONS] xmlfile Prefix_
 options:
@@ -768,7 +769,7 @@ options:
             void symbol (DBusGMethodInvocation *context)
         and return some sort of "not implemented" error via
             dbus_g_method_return_error (context, ...)
-"""
+""")
     sys.exit(1)
 
 
diff --git a/tools/glib-interfaces-gen.py b/tools/glib-interfaces-gen.py
index 69c721b..8aa11f8 100644
--- a/tools/glib-interfaces-gen.py
+++ b/tools/glib-interfaces-gen.py
@@ -13,9 +13,9 @@ class Generator(object):
         assert declfile.endswith('.h')
         docfile = declfile[:-2] + '-gtk-doc.h'
 
-        self.impls = open(implfile, 'w')
-        self.decls = open(declfile, 'w')
-        self.docs = open(docfile, 'w')
+        self.impls = open(implfile, 'wb')
+        self.decls = open(declfile, 'wb')
+        self.docs = open(docfile, 'wb')
         self.spec = get_by_path(dom, "spec")[0]
 
     def h(self, code):
diff --git a/tools/glib-signals-marshal-gen.py b/tools/glib-signals-marshal-gen.py
index 0d02c13..1913399 100644
--- a/tools/glib-signals-marshal-gen.py
+++ b/tools/glib-signals-marshal-gen.py
@@ -41,12 +41,12 @@ class Generator(object):
         for signal in signals:
             self.do_signal(signal)
 
-        all = self.marshallers.keys()
+        all = list(self.marshallers.keys())
         all.sort()
         for marshaller in all:
             rhs = self.marshallers[marshaller]
             if not marshaller.startswith('g_cclosure'):
-                print 'VOID:' + ','.join(rhs)
+                print('VOID:' + ','.join(rhs))
 
 if __name__ == '__main__':
     argv = sys.argv[1:]
diff --git a/tools/gobject-foo.py b/tools/gobject-foo.py
index 5921cab..bf5d7b8 100644
--- a/tools/gobject-foo.py
+++ b/tools/gobject-foo.py
@@ -78,4 +78,4 @@ if __name__ == '__main__':
 
     head, tail = argv
 
-    print '\n'.join(gobject_header(head, tail, as_interface=as_interface))
+    print('\n'.join(gobject_header(head, tail, as_interface=as_interface)))
diff --git a/tools/libglibcodegen.py b/tools/libglibcodegen.py
index 6a9d214..90018ec 100644
--- a/tools/libglibcodegen.py
+++ b/tools/libglibcodegen.py
@@ -154,7 +154,7 @@ def type_to_gtype(s):
         return ("GHashTable *", "DBUS_TYPE_G_STRING_STRING_HASHTABLE", "BOXED", False)
     elif s[:2] == 'a{':  #some arbitrary hash tables
         if s[2] not in ('y', 'b', 'n', 'q', 'i', 'u', 's', 'o', 'g'):
-            raise Exception, "can't index a hashtable off non-basic type " + s
+            raise Exception( 'cant index a hashtable off non-basic type' + s )
         first = type_to_gtype(s[2])
         second = type_to_gtype(s[3:-1])
         return ("GHashTable *", "(dbus_g_type_get_map (\"GHashTable\", " + first[1] + ", " + second[1] + "))", "BOXED", False)
@@ -169,4 +169,4 @@ def type_to_gtype(s):
         return ("GValueArray *", gtype, "BOXED", True)
 
     # we just don't know ..
-    raise Exception, "don't know the GType for " + s
+    raise Exception( 'dont know the GType for ' + s )
diff --git a/tools/libtpcodegen.py b/tools/libtpcodegen.py
index 837ff2f..f4e27b0 100644
--- a/tools/libtpcodegen.py
+++ b/tools/libtpcodegen.py
@@ -28,9 +28,11 @@ NS_TP = "http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0"
 
 _ASCII_ALNUM = ascii_letters + digits
 
+def cmp_0(a, b):
+    return (a > b) - (a < b)
 
 def cmp_by_name(node1, node2):
-    return cmp(node1.getAttributeNode("name").nodeValue,
+    return cmp_0(node1.getAttributeNode("name").nodeValue,
                node2.getAttributeNode("name").nodeValue)
 
 
@@ -155,7 +157,7 @@ class _SignatureIter:
     def __init__(self, string):
         self.remaining = string
 
-    def next(self):
+    def __next__(self):
         if self.remaining == '':
             raise StopIteration
 
diff --git a/tools/make-version-script.py b/tools/make-version-script.py
index 0d30aa3..416d664 100644
--- a/tools/make-version-script.py
+++ b/tools/make-version-script.py
@@ -53,7 +53,7 @@ def main(abifiles, symbols=None, unreleased_version=None,
 
     if symbols is not None:
         symbol_set = open(symbols, 'r').readlines()
-        symbol_set = map(str.strip, symbol_set)
+        symbol_set = list(map(str.strip, symbol_set))
         symbol_set = set(symbol_set)
 
     versioned_symbols = set()
@@ -63,9 +63,9 @@ def main(abifiles, symbols=None, unreleased_version=None,
 
     if dpkg:
         assert dpkg_first_line is not None
-        print dpkg_first_line
+        print(dpkg_first_line)
         if dpkg_build_depends_package is not None:
-            print "* Build-Depends-Package: %s" % dpkg_build_depends_package
+            print("* Build-Depends-Package: %s" % dpkg_build_depends_package)
 
     for filename in abifiles:
         lines = open(filename, 'r').readlines()
@@ -120,8 +120,8 @@ def main(abifiles, symbols=None, unreleased_version=None,
         lines = lines[cut:]
 
         if gnuld:
-            print "%s {" % version
-            print "    global:"
+            print("%s {" % version)
+            print("    global:")
 
         for symbol in lines:
             symbol = symbol.strip()
@@ -130,7 +130,7 @@ def main(abifiles, symbols=None, unreleased_version=None,
                 continue
 
             if gnuld:
-                print "        %s;" % symbol
+                print("        %s;" % symbol)
             elif dpkg:
                 dpkg_symbols.append('%s@%s %s' % (symbol, version, release))
 
@@ -142,22 +142,22 @@ def main(abifiles, symbols=None, unreleased_version=None,
 
         if gnuld:
             if extends == '-':
-                print "    local:"
-                print "        *;"
-                print "};"
+                print("    local:")
+                print("        *;")
+                print("};")
             else:
-                print "} %s;" % extends
-                print
+                print("} %s;" % extends)
+                print()
 
     if dpkg:
         dpkg_symbols.sort()
         dpkg_versions.sort()
 
         for x in dpkg_versions:
-            print " %s" % x
+            print(" %s" % x)
 
         for x in dpkg_symbols:
-            print " %s" % x
+            print(" %s" % x)
 
     if symbol_set is not None:
         missing = versioned_symbols - symbol_set
@@ -182,13 +182,13 @@ def main(abifiles, symbols=None, unreleased_version=None,
                 raise SystemExit(1)
 
             if gnuld:
-                print "%s {" % unreleased_version
-                print "    global:"
+                print("%s {" % unreleased_version)
+                print("    global:")
 
                 for symbol in unreleased:
-                    print "        %s;" % symbol
+                    print("        %s;" % symbol)
 
-                print "} %s;" % version
+                print("} %s;" % version)
 
 
 if __name__ == '__main__':
diff --git a/tools/xincludator.py b/tools/xincludator.py
index 63e106a..d77d063 100644
--- a/tools/xincludator.py
+++ b/tools/xincludator.py
@@ -5,13 +5,15 @@ import codecs, locale
 import os
 import xml.dom.minidom
 
-stdout = codecs.getwriter('utf-8')(stdout)
+
+
+stdout.reconfigure(encoding='utf-8')
 
 NS_XI = 'http://www.w3.org/2001/XInclude'
 
 def xincludate(dom, base, dropns = []):
     remove_attrs = []
-    for i in xrange(dom.documentElement.attributes.length):
+    for i in range(dom.documentElement.attributes.length):
         attr = dom.documentElement.attributes.item(i)
         if attr.prefix == 'xmlns':
             if attr.localName in dropns:
